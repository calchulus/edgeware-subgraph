// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Locked extends EthereumEvent {
  get params(): Locked__Params {
    return new Locked__Params(this);
  }
}

export class Locked__Params {
  _event: Locked;

  constructor(event: Locked) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get eth(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lockAddr(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get term(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get edgewareAddr(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get isValidator(): boolean {
    return this._event.parameters[5].value.toBoolean();
  }

  get time(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class Signaled extends EthereumEvent {
  get params(): Signaled__Params {
    return new Signaled__Params(this);
  }
}

export class Signaled__Params {
  _event: Signaled;

  constructor(event: Signaled) {
    this._event = event;
  }

  get contractAddr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get edgewareAddr(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get time(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Contract extends SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  LOCK_START_TIME(): BigInt {
    let result = super.call("LOCK_START_TIME", []);
    return result[0].toBigInt();
  }

  LOCK_END_TIME(): BigInt {
    let result = super.call("LOCK_END_TIME", []);
    return result[0].toBigInt();
  }

  LOCK_DROP_PERIOD(): BigInt {
    let result = super.call("LOCK_DROP_PERIOD", []);
    return result[0].toBigInt();
  }

  addressFrom(_origin: Address, _nonce: BigInt): Address {
    let result = super.call("addressFrom", [
      EthereumValue.fromAddress(_origin),
      EthereumValue.fromUnsignedBigInt(_nonce)
    ]);
    return result[0].toAddress();
  }
}

export class SignalCall extends EthereumCall {
  get inputs(): SignalCall__Inputs {
    return new SignalCall__Inputs(this);
  }

  get outputs(): SignalCall__Outputs {
    return new SignalCall__Outputs(this);
  }
}

export class SignalCall__Inputs {
  _call: SignalCall;

  constructor(call: SignalCall) {
    this._call = call;
  }

  get contractAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get nonce(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get edgewareAddr(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class SignalCall__Outputs {
  _call: SignalCall;

  constructor(call: SignalCall) {
    this._call = call;
  }
}

export class LockCall extends EthereumCall {
  get inputs(): LockCall__Inputs {
    return new LockCall__Inputs(this);
  }

  get outputs(): LockCall__Outputs {
    return new LockCall__Outputs(this);
  }
}

export class LockCall__Inputs {
  _call: LockCall;

  constructor(call: LockCall) {
    this._call = call;
  }

  get term(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get edgewareAddr(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get isValidator(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class LockCall__Outputs {
  _call: LockCall;

  constructor(call: LockCall) {
    this._call = call;
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get startTime(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
