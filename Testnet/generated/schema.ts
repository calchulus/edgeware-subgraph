// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Locked extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Locked entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Locked entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Locked", id.toString(), this);
  }

  static load(id: string): Locked | null {
    return store.get("Locked", id) as Locked | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get eth(): BigInt {
    let value = this.get("eth");
    return value.toBigInt();
  }

  set eth(value: BigInt) {
    this.set("eth", Value.fromBigInt(value));
  }

  get lockAddr(): Bytes {
    let value = this.get("lockAddr");
    return value.toBytes();
  }

  set lockAddr(value: Bytes) {
    this.set("lockAddr", Value.fromBytes(value));
  }

  get term(): i32 {
    let value = this.get("term");
    return value.toI32();
  }

  set term(value: i32) {
    this.set("term", Value.fromI32(value));
  }

  get edgewareAddr(): Bytes {
    let value = this.get("edgewareAddr");
    return value.toBytes();
  }

  set edgewareAddr(value: Bytes) {
    this.set("edgewareAddr", Value.fromBytes(value));
  }

  get isValidator(): boolean {
    let value = this.get("isValidator");
    return value.toBoolean();
  }

  set isValidator(value: boolean) {
    this.set("isValidator", Value.fromBoolean(value));
  }

  get time(): BigInt {
    let value = this.get("time");
    return value.toBigInt();
  }

  set time(value: BigInt) {
    this.set("time", Value.fromBigInt(value));
  }
}

export class Signaled extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Signaled entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Signaled entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Signaled", id.toString(), this);
  }

  static load(id: string): Signaled | null {
    return store.get("Signaled", id) as Signaled | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contractAddr(): Bytes {
    let value = this.get("contractAddr");
    return value.toBytes();
  }

  set contractAddr(value: Bytes) {
    this.set("contractAddr", Value.fromBytes(value));
  }

  get edgewareAddr(): Bytes {
    let value = this.get("edgewareAddr");
    return value.toBytes();
  }

  set edgewareAddr(value: Bytes) {
    this.set("edgewareAddr", Value.fromBytes(value));
  }

  get time(): BigInt {
    let value = this.get("time");
    return value.toBigInt();
  }

  set time(value: BigInt) {
    this.set("time", Value.fromBigInt(value));
  }
}
